#!/usr/bin/env perl

use warnings;
use strict;
use 5.010;
use File::ShareDir 'module_dir';
use File::Copy;
use Cwd qw(getcwd abs_path);
eval "use Kelp;";
if ($@) {
    die "Please make sure Kelp is successfully installed and try again\nError: $@";
}

die "Usage: <module>\n"
    unless $ARGV[0];

use Pulp;
my $mod_dir = abs_path(module_dir('Pulp'));

my $module = $ARGV[0];
my $file   = $module;
$file =~ s/::/\-/g;
mkdir $file;
chdir $file;
system "Kelp $module";
chdir $file;

my @parts = split '-', $file;
my $path = 'lib/' . join('/', @parts);
say "=> Creating $path";
mkdir $path;
say "=> Creating $path/Route";
mkdir "${path}/Route";
say "=> Creating $path/Controller";
mkdir "${path}/Controller";

unlink "${path}.pm";

open my $core, '+>', "${path}.pm" or die "Could not open ${path}.pm: $!";
say $core "package ${module};\n";
say $core "use Pulp;";
say $core "maps ['Main'];";
close $core;

say "=> Wrote ${path}.pm";

open my $route, '+>', "${path}/Route/Main.pm" or die "Could not open ${path}/Route/Main.pm: $!";
say $route "package ${module}::Route::Main;\n";
say $route "use Pulp::Route;\n";
say $route "get '/' => 'Controller::Main::hello';";
close $route;

say "=> Wrote ${path}/Route/Main.pm";

open my $cont, '+>', "${path}/Controller/Main.pm" or die "Could not open ${path}/Controller/Main.pm: $!";
say $cont "package ${module}::Controller::Main;\n";
say $cont "use Pulp::Controller;\n";
say $cont <<EOT;

sub hello {
    my (\$self) = \@_;
    \$self->stash->{title} = "Welcome to Pulp!";
    \$self->detach; # views/hello.tt
}
EOT

close $cont;

say "=> Wrote ${path}/Controller/Main.pm";

say "=> Creating config.pl";
unlink "conf/config.pl";
open my $conf, '+>', "conf/config.pl" or die "Could not open conf/config.pl: $!";
say $conf <<EOT;
{
    modules      => [qw/Template::Toolkit JSON Logger/],
    middleware      => [qw/Static/],
    middleware_init => {
        Static => {
            path => qr{^/assets/},
            root => '.',
        }
    },
    modules_init => {

        # One log for errors and one for debug
        Logger => {
            outputs => [
                [
                    'File',
                    name      => 'debug',
                    filename  => 'log/debug.log',
                    min_level => 'debug',
                    mode      => '>>',
                    newline   => 1,
                    binmode   => ":encoding(UTF-8)"
                ], [
                    'File',
                    name      => 'error',
                    filename  => 'log/error.log',
                    min_level => 'error',
                    mode      => '>>',
                    newline   => 1,
                    binmode   => ":encoding(UTF-8)"
                ],
            ]
        },

        # JSON prints pretty
        JSON => {
            pretty => 1
        },

        'Template::Toolkit' => {
          ENCODING => 'utf8',
          INCLUDE_PATH => [qw{./views}],
          RELATIVE => 1,
          TAG_STYLE => 'asp',
          WRAPPER   => 'wrapper.tt',
        },
    }
};
EOT
close $conf;
say "=> Creating wrapper";
open my $wrapper, '+>', "views/wrapper.tt" or die "Could not open views/wrapper.tt: $!";
say $wrapper <<EOT;
<!doctype html>
<html lang="en">
    <head>
        <title><% title %></title>
        <link rel="icon" type="image/png" href="/assets/img/favicon.png">
        <link rel="stylesheet" href="/assets/css/pulp.css" type="text/css">
        <style type="text/css">
            body {
                margin-top: 20px;
                background: #ced8f6;
            }

            .content-box {
                margin: 0 auto;
                width: 50%;
                padding: 15px 15px 15px 30px;
                background: #fff;
                border-radius: 20px;
                margin-bottom: 15px;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <% content %>
        </div>
    </body>
</html>
EOT
close $wrapper;

say "=> Working on views";
unlink "views/home.tt";
open my $view, '+>', "views/hello.tt" or die "Could not open views/hello.tt: $!";
say $view <<EOT;
<div class="row">
    <div class="col-twelve">
        <div class="content-box">
            <h1>Welcome to Pulp!</h1>
            <p>You have successfully created a new Pulp app.</p>
        </div>
    </div>
</div>
EOT
close $view;

say "=> Creating assets";
mkdir "assets";
mkdir "assets/css";
mkdir "assets/img";
my $copy_fav = "${mod_dir}/img/favicon.png";
my $copy_css = "${mod_dir}/css/pulp.css";
say "=> Copying ${copy_css} -> assets/css/pulp.css";
#system("touch assets/css/pulp.css");
if (copy $copy_css, "assets/css/pulp.css") {
    say "=> Copy successful";
}
else {
    say "x> $!";
}
say "=> Copying ${copy_fav} -> assets/img/favicon.png";
if (copy $copy_fav, "assets/img/favicon.png") {
    say "=> Copy successful";
}
else {
    say "x> $!";
}
